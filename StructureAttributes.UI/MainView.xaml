<UserControl x:Class="StructureAttributes.UI.MainView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:StructureAttributes.UI" xmlns:viewmodel="clr-namespace:StructureAttributes.ViewModel;assembly=StructureAttributes.ViewModel" d:DataContext="{d:DesignInstance Type=viewmodel:MainViewModel}"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
        <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="Transparent"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="Transparent"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="White"/>
        <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="Transparent"/>
        <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="Transparent"/>
        <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="LightGreen"/>
        <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
        <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
        <Style x:Key="ExpanderHeaderFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle Margin="0" StrokeDashArray="1 2" Stroke="Black" SnapsToDevicePixels="true" StrokeThickness="1"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Ellipse x:Name="circle" Fill="Transparent" HorizontalAlignment="Right" Height="19" Stroke="Transparent" VerticalAlignment="Bottom" Width="19" Grid.Column="1" Margin="0,0,3,0"/>
                                <Image x:Name="infoIcon" Source="/StructureAttributes.UI;component/Resources/Info_Icon.png" Width="15" Height="15" HorizontalAlignment="Right" Grid.Column="1" Margin="0,0,22,0" ToolTip="In progress" />

                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Right" Stroke="LightGray" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center" Grid.Column="1" Margin="0,0,8,0"/>
                                <ContentPresenter Grid.Column="1" Margin="-15,2.5,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid>
                                    <Grid.LayoutTransform>
                                        <TransformGroup>
                                            <TransformGroup.Children>
                                                <TransformCollection>
                                                    <RotateTransform Angle="180"/>
                                                </TransformCollection>
                                            </TransformGroup.Children>
                                        </TransformGroup>
                                    </Grid.LayoutTransform>
                                    <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                    <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                                </Grid>
                                <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="19"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid>
                                    <Grid.LayoutTransform>
                                        <TransformGroup>
                                            <TransformGroup.Children>
                                                <TransformCollection>
                                                    <RotateTransform Angle="90"/>
                                                </TransformCollection>
                                            </TransformGroup.Children>
                                        </TransformGroup>
                                    </Grid.LayoutTransform>
                                    <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                    <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                                </Grid>
                                <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="19"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid>
                                    <Grid.LayoutTransform>
                                        <TransformGroup>
                                            <TransformGroup.Children>
                                                <TransformCollection>
                                                    <RotateTransform Angle="-90"/>
                                                </TransformCollection>
                                            </TransformGroup.Children>
                                        </TransformGroup>
                                    </Grid.LayoutTransform>
                                    <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                    <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                                </Grid>
                                <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" SnapsToDevicePixels="true">
                            <DockPanel>
                                <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" FontStretch="{TemplateBinding FontStretch}" Foreground="{TemplateBinding Foreground}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="true">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Right">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Up">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Left">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Grid x:Name="Grid">
                            <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" 
                                           Height="Auto" Fill="#4D4D4D"/>
                            <Border x:Name="Rectangle1" CornerRadius="2 2 2 2" HorizontalAlignment="Stretch" 
                                        VerticalAlignment="Stretch" Width="5" Height="Auto" 
                                        Background="{TemplateBinding Background}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Tag" Value="Horizontal">
                                <Setter TargetName="Rectangle1" Property="Width" Value="Auto"/>
                                <Setter TargetName="Rectangle1" Property="Height" Value="7"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Foreground" Value="#4D4D4D"/>
            <Setter Property="Background" Value="#4D4D4D"/>
            <Setter Property="Width" Value="0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="GridRoot" Width="7" Background="{x:Null}">
                            <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="False">
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Background="Gray" BorderThickness="0" BorderBrush="Transparent" Style="{DynamicResource ScrollThumbs}"/>

                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="False">
                                    </RepeatButton>
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="False"/>
                                </Track.DecreaseRepeatButton>
                            </Track>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                                <Setter Value="{DynamicResource ButtonSelectBrush}" 
                                            TargetName="Thumb" Property="Background"/>
                            </Trigger>
                            <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                                <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background"/>
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="Orientation" Value="Horizontal">
                                <Setter TargetName="GridRoot" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="PART_Track" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Width" Value="Auto"/>
                                <Setter Property="Height" Value="12"/>
                                <Setter TargetName="Thumb" Property="Tag" Value="Horizontal"/>
                                <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand"/>
                                <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
        <Style x:Key="GroupBoxStyle1" TargetType="{x:Type GroupBox}">
            <Setter Property="BorderBrush" Value="#D5DFE5"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GroupBox}">
                        <Grid SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="6"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="6"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="6"/>
                            </Grid.RowDefinitions>
                            <Border Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" Grid.Column="0" Grid.ColumnSpan="4" Grid.RowSpan="3" Grid.Row="1"/>
                            <Border BorderBrush="Red" BorderThickness="0" CornerRadius="4" Grid.ColumnSpan="4" Grid.RowSpan="3" Grid.Row="1">
                                <Border.OpacityMask>
                                    <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                        <Binding ElementName="Header" Path="ActualWidth"/>
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                    </MultiBinding>
                                </Border.OpacityMask>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                    <Border BorderBrush="White" BorderThickness="0" CornerRadius="2"/>
                                </Border>
                            </Border>
                            <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.RowSpan="2" Grid.Row="0">
                                <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <ContentPresenter Grid.Column="1" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>


    <Grid Width="Auto" HorizontalAlignment="Stretch">

        <StackPanel Orientation="Vertical" OpacityMask="Black" Background="#FF4D4D4D" Width="Auto" HorizontalAlignment="Stretch">
            <Label x:Name="SomaLabel2" Content="Structure Layer Attributes " Margin="0,10,0,0" HorizontalAlignment="Left" Foreground="#FFE2E2E2" FontFamily="Courier" FontStyle="Normal" FontSize="12" Background="#FF4D4D4D" Width="380" BorderBrush="#FFB5B5B5"/>
            <TabControl VerticalContentAlignment="Stretch" x:Name="tabControl" Background="#FF4D4D4D" BorderBrush="#FF545454" >
                <TabControl.Resources>
                    <Style TargetType="{x:Type DataGridCell}" >
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderBrush" Value="#FF646464"/>
                        <Setter Property="BorderThickness"
                                Value="0"/>
                        <Setter Property="Foreground" Value="White"/>
                    </Style>
                    <Style TargetType="{x:Type DataGridColumnHeader}">
                        <Setter Property="Background"
                                Value="#4D4D4D"/>
                        <Setter Property="BorderBrush" 
                                Value="#FF545454"/>
                        <Setter Property="BorderThickness" 
                                Value="0, 0, 0, 1"/>
                        <Setter Property="HorizontalContentAlignment" 
                                Value="Center"/>
                        <Setter Property="VerticalContentAlignment" 
                                Value="Center"/>
                        <Setter Property="Height" 
                                Value="25"/>
                    </Style>
                    <Style TargetType="{x:Type DataGridRow}">
                        <Setter Property="Background"
                                Value="#4D4D4D"/>
                        <Setter Property="BorderBrush" 
                                Value="#4D4D4D"/>
                        <Setter Property="BorderThickness" 
                                Value="0, 0, 0, 0"/>
                    </Style>
                    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
                        <GradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="#4D4D4D" Offset="0.0"/>
                                <GradientStop Color="#4D4D4D" Offset="1.0"/>
                            </GradientStopCollection>
                        </GradientBrush.GradientStops>
                    </LinearGradientBrush>
                    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />
                    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />
                    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
                    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />
                    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
                    <ControlTemplate x:Key="simpleTI" TargetType="TabItem">
                        <Grid>
                            <Border Name="Border" 
                            BorderThickness="0,0,0,2" 
                            Background="{StaticResource LightBrush}"
                            BorderBrush="{StaticResource LightBrush}"
                            CornerRadius="0" >
                                <ContentPresenter x:Name="ContentSite" Margin="5,0"  VerticalAlignment="Center" HorizontalAlignment="Center"
                                          ContentSource="Header"  RecognizesAccessKey="True"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Border" Property="BorderBrush" Value="Green" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </TabControl.Resources>


                <TabItem  MaxWidth="55" HorizontalAlignment="Left" Background="#FF4D4D4D" Template="{StaticResource simpleTI}" BorderBrush="#FF4D4D4D" Margin="-2,0,0,0" >
                    <TabItem.Header>
                        <Image x:Name="ImagePath2" Source="/StructureAttributes.UI;component/Resources/new_SurfaceLoad.png" Width="20" Height="20" Margin="5" />
                    </TabItem.Header>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="137*"/>
                            <ColumnDefinition Width="657*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <GroupBox Style="{DynamicResource GroupBoxStyle1}" Header="Permanent Load Description" Grid.Row="0" MinHeight="60" FontFamily="Courier" BorderBrush="Gray" BorderThickness="1" Foreground="#FFE2E2E2" Margin="0,5,0,0" FontSize="12" Grid.ColumnSpan="2" >
                            <StackPanel>
                                <TextBlock x:Name="SomaLabel1" FontSize="11" FontWeight="Regular" Foreground="#FFE2E2E2" FontFamily="Courier" TextWrapping="Wrap" Margin="3,5,0,0"/>
                                <Label x:Name="SomaLabel" FontSize="11" FontWeight="Regular" Foreground="#FFE2E2E2" FontFamily="Courier" Margin="0,4,0,0"/>
                            </StackPanel>
                        </GroupBox>
                        <GroupBox Style="{DynamicResource GroupBoxStyle1}" Header="Imposed Load Description" Grid.Row="1" MinHeight="60" FontFamily="Courier" BorderBrush="Gray" BorderThickness="1" Foreground="#FFE2E2E2" Margin="0,5,0,0" FontSize="12" Grid.ColumnSpan="2" >
                            <StackPanel>
                                <TextBlock x:Name="SomaLabel_Imposed_Description" FontSize="11" FontWeight="Regular" Foreground="#FFE2E2E2" FontFamily="Courier" TextWrapping="Wrap" Margin="3,5,0,0"/>
                                <Label x:Name="SomaLabel_Imposed_Value" FontSize="11" FontWeight="Regular" Foreground="#FFE2E2E2" FontFamily="Courier" Margin="0,4,0,0"/>
                            </StackPanel>
                        </GroupBox>
                        <Expander Style="{DynamicResource ExpanderStyle1}"  Name="ExpanderControl" Header="Permanent Area Load"  Foreground="#FFE2E2E2" FontWeight="SemiBold" FontSize="12" Width="Auto" Height="Auto" IsExpanded="False" BorderBrush="#616161" BorderThickness="2,2,2,2" FontFamily="Courier" Grid.Row="2" Margin="0,9,0,0" Background="#FF464646" Grid.ColumnSpan="2">
                            <Grid Width="Auto" Height="400" HorizontalAlignment="Stretch">
                                <DataGrid x:Name="DataGridPermanentAreaLoad" 
                                          ItemsSource="{Binding SurfaceLoads}"
                                          BorderBrush="#FF464646"
                                          BorderThickness="3,3,3,3"
                                          VerticalContentAlignment="Center"
                                          HorizontalAlignment="Stretch" 
                                          Foreground="#FFE2E2E2" 
                                          Background="#4D4D4D" 
                                          IsSynchronizedWithCurrentItem="True" 
                                          AutoGenerateColumns="False"
                                          HorizontalGridLinesBrush="#FF5A5A5A" 
                                          VerticalGridLinesBrush="#FF5A5A5A"
                                          HeadersVisibility="Column" 
                                          ScrollViewer.VerticalScrollBarVisibility="Auto"
                                          CanUserSortColumns="False"
                                          ScrollViewer.CanContentScroll="True"
                                          RowDetailsVisibilityMode="VisibleWhenSelected">
                                    <DataGrid.RowStyle>
                                        <Style TargetType="{x:Type DataGridRow}">
                                            <Setter Property="Background" Value="#4D4D4D"/>
                                            <Setter Property="Foreground" Value="White"/>
                                            <Setter Property="BorderThickness" Value="0,0,0,1"/>
                                            <Setter Property="BorderBrush" Value="#4D4D4D"/>
                                            <Setter Property="Padding" Value="0"/>
                                            <Setter Property="SnapsToDevicePixels" Value="true"/>
                                            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
                                            <Setter Property="ValidationErrorTemplate">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Grid HorizontalAlignment="Center">
                                                            <Ellipse Width="12" Height="12" Margin="5 -3 0 0"
                                                            Fill="Red" Stroke="Black" VerticalAlignment="Center"
                                                            StrokeThickness="0.5"/>
                                                        </Grid>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="IsHitTestVisible" Value="True" />
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="#FF526548"/>
                                                </Trigger>
                                                <Trigger Property="IsSelected" Value="True">
                                                    <Setter Property="Background" Value="#FF526548"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </DataGrid.RowStyle>
                                    <DataGrid.Columns >
                                        <DataGridTemplateColumn Width="SizeToCells" IsReadOnly="True">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <WrapPanel>
                                                        <Image x:Name="iconError" Width="16" Height="16" Margin="2,3,0,0" Source="{Binding ImagePath}">
                                                            <Image.ToolTip>
                                                                <ToolTip Background="#db000c" 
                                                                         Width="250" 
                                                                         Foreground="White"
                                                                         FontSize="12"
                                                                         FontFamily="Courier">
                                                                    <ToolTip.Style>
                                                                        <Style TargetType="ToolTip">
                                                                            <Setter Property="Opacity" Value="0" />
                                                                            <Style.Triggers>
                                                                                <EventTrigger RoutedEvent="ToolTip.Opened">
                                                                                    <BeginStoryboard>
                                                                                        <Storyboard>
                                                                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.3"/>
                                                                                        </Storyboard>
                                                                                    </BeginStoryboard>
                                                                                </EventTrigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </ToolTip.Style>
                                                                    <StackPanel>
                                                                        <TextBlock Text="Note that this item represents a quantity and not a centimeter measurement." TextWrapping="Wrap" FontFamily="Courier"/>
                                                                        <TextBlock Text="It is important to verify that the information in this item has been filled in correctly." TextWrapping="Wrap"/>
                                                                    </StackPanel>
                                                                </ToolTip>
                                                            </Image.ToolTip>
                                                            <Image.Style>
                                                                <Style TargetType="Image">
                                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                                    <Style.Triggers>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="10" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="14" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="17" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="18" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="19" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="20" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="21" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="30" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="31" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="32" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Image.Style>
                                                        </Image>
                                                    </WrapPanel>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTemplateColumn Header="cm" Width="40" CanUserSort="False" CanUserResize="True" CanUserReorder="False" >
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding cm, ValidatesOnDataErrors=True, ValidatesOnNotifyDataErrors=True, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True, NotifyOnValidationError=True}" Height="22" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" FontFamily="Courier" FontStyle="Normal" FontWeight="Normal"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate>
                                                    <TextBox Text="{Binding cm, Mode=TwoWay}" Height="22" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" Background="#4D4D4D"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTemplateColumn Header="Material" Width="*">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Material}" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center"  TextWrapping="Wrap" Foreground="#FFE2E2E2" FontFamily="Courier" FontStyle="Normal" FontWeight="Normal"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate>
                                                    <TextBox Text="{Binding Material, Mode=TwoWay}" Height="Auto" Width="250" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" Background="#FF404040" BorderBrush="#FF404040" VerticalContentAlignment="Center"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTemplateColumn Header="(kg/m²)/cm" Width="70">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding KgM2Cm}" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" FontFamily="Courier" FontStyle="Normal" FontWeight="Normal"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate >
                                                <DataTemplate>
                                                    <TextBox Text="{Binding KgM2Cm, Mode=TwoWay}" Height="Auto" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" VerticalContentAlignment="Center" Foreground="#FFE2E2E2" Background="#4D4D4D"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </Grid>
                        </Expander>
                        <Expander Style="{DynamicResource ExpanderStyle1}"  Name="ExpanderControl1" Header="Imposed Area Load"  Foreground="#FFE2E2E2" FontWeight="SemiBold" FontSize="12" Width="Auto" Height="Auto" IsExpanded="False" BorderBrush="DimGray" Background="#FF464646" BorderThickness="2,2,2,2" FontFamily="Courier" Grid.Row="3" Margin="0,9,0,0" Grid.ColumnSpan="2">
                            <Grid Width="Auto" Height="400" HorizontalAlignment="Stretch">
                                <DataGrid Name="DataGridImposedAreaLoad" 
                                          BorderBrush="#FF464646" 
                                          BorderThickness="3,3,3,3"
                                          VerticalContentAlignment="Center"
                                          HorizontalAlignment="Stretch" 
                                          Foreground="#FFE2E2E2" 
                                          Background="#4D4D4D" 
                                          IsSynchronizedWithCurrentItem="True" 
                                          AutoGenerateColumns="False"
                                          HorizontalGridLinesBrush="#FF5A5A5A" 
                                          VerticalGridLinesBrush="#FF5A5A5A"
                                          HeadersVisibility="Column"
                                          ScrollViewer.VerticalScrollBarVisibility="Auto"
                                          CanUserSortColumns="False"
                                          ScrollViewer.CanContentScroll="True"
                                          RowDetailsVisibilityMode="VisibleWhenSelected">
                                    <DataGrid.RowStyle>
                                        <Style TargetType="{x:Type DataGridRow}">
                                            <Setter Property="Background" Value="#4D4D4D"/>
                                            <Setter Property="Foreground" Value="White"/>
                                            <Setter Property="BorderThickness" Value="0,0,0,1"/>
                                            <Setter Property="BorderBrush" Value="#4D4D4D"/>
                                            <Setter Property="Padding" Value="0"/>
                                            <Setter Property="SnapsToDevicePixels" Value="true"/>
                                            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
                                            <Setter Property="ValidationErrorTemplate">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Grid HorizontalAlignment="Center">
                                                            <Ellipse Width="12" Height="12" Margin="5 -3 0 0"
                                                            Fill="Red" Stroke="Black" VerticalAlignment="Center"
                                                            StrokeThickness="0.5"/>
                                                        </Grid>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="IsHitTestVisible" Value="True" />
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="#FF526548"/>
                                                </Trigger>
                                                <Trigger Property="IsSelected" Value="True">
                                                    <Setter Property="Background" Value="#FF526548"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </DataGrid.RowStyle>
                                    <DataGrid.Columns >
                                        <DataGridTemplateColumn Width="SizeToCells" IsReadOnly="True">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <WrapPanel>
                                                        <Image x:Name="iconError" Width="16" Height="16" Margin="2,3,0,0" Source="{Binding ImagePath}">
                                                            <Image.ToolTip>
                                                                <ToolTip Background="#db000c" 
                                                                         Width="250" 
                                                                         Foreground="White"
                                                                         FontSize="12"
                                                                         FontFamily="Courier">
                                                                    <ToolTip.Style>
                                                                        <Style TargetType="ToolTip">
                                                                            <Setter Property="Opacity" Value="0" />
                                                                            <Style.Triggers>
                                                                                <EventTrigger RoutedEvent="ToolTip.Opened">
                                                                                    <BeginStoryboard>
                                                                                        <Storyboard>
                                                                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.3"/>
                                                                                        </Storyboard>
                                                                                    </BeginStoryboard>
                                                                                </EventTrigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </ToolTip.Style>
                                                                    <StackPanel>
                                                                        <TextBlock Text="Note that this item represents a quantity and not a centimeter measurement." TextWrapping="Wrap" FontFamily="Courier"/>
                                                                        <TextBlock Text="It is important to verify that the information in this item has been filled in correctly." TextWrapping="Wrap"/>
                                                                    </StackPanel>
                                                                </ToolTip>
                                                            </Image.ToolTip>
                                                            <Image.Style>
                                                                <Style TargetType="Image">
                                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                                    <Style.Triggers>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="10" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="14" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="17" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="18" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="19" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="20" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="21" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="30" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="31" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True" />
                                                                                <Condition Binding="{Binding Index}" Value="32" />
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Visibility" Value="Visible" />
                                                                        </MultiDataTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Image.Style>
                                                        </Image>
                                                    </WrapPanel>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridCheckBoxColumn    Header="Check" Width="36" Binding="{Binding Check}" CanUserResize="True" >
                                            <DataGridCheckBoxColumn.ElementStyle>
                                                <Style TargetType="{x:Type CheckBox}" >
                                                    <Setter Property="HorizontalAlignment" Value="Center"/>
                                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                                    <Setter Property="Margin" Value="0"/>
                                                    <Setter Property="Width" Value="13"/>
                                                    <Setter Property="Height" Value="13"/>
                                                    <Setter Property="Foreground" Value="Green"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type CheckBox}">
                                                                <CheckBox x:Name="MyCheckBox" IsChecked="{Binding Check, UpdateSourceTrigger=PropertyChanged}" Content="{Binding Check}" Background="#4d4d4d" >
                                                                    <CheckBox.Style>
                                                                        <Style TargetType="CheckBox">
                                                                            <Setter Property="Template">
                                                                                <Setter.Value>
                                                                                    <ControlTemplate TargetType="{x:Type CheckBox}">
                                                                                        <BulletDecorator>
                                                                                            <BulletDecorator.Bullet>
                                                                                                <Grid Width="13" Height="13">
                                                                                                    <Ellipse x:Name="Border" Fill="{TemplateBinding Background}" Stroke="DimGray" StrokeThickness="1"/>
                                                                                                    <Path x:Name="CheckMark" Stroke="LightGreen" StrokeThickness="2"
                                                                                                         Data="M 2,5 L 6,10 L 12,2"
                                                                                                         Visibility="{Binding IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                                                </Grid>
                                                                                            </BulletDecorator.Bullet>
                                                                                            <ContentPresenter Margin="4" VerticalAlignment="Center" TextBlock.Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True"/>
                                                                                        </BulletDecorator>
                                                                                    </ControlTemplate>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                        </Style>
                                                                    </CheckBox.Style>
                                                                </CheckBox>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsChecked" Value="True">
                                                                        <Setter  Property="Foreground" Value="Green" />
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </DataGridCheckBoxColumn.ElementStyle>
                                        </DataGridCheckBoxColumn>
                                        <DataGridTemplateColumn Header="Load Type" Width="*">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding LoadType}" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Stretch" Foreground="#FFE2E2E2" TextWrapping="Wrap" Margin="8,5,0,5" FontFamily="Courier" FontStyle="Normal" FontWeight="Normal"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate>
                                                    <TextBox Text="{Binding LoadType, Mode=TwoWay}" Height="Auto" Width="250" HorizontalAlignment="Center" VerticalAlignment="Stretch" Foreground="#FFE2E2E2" Background="#FF404040" BorderBrush="#FF404040" VerticalContentAlignment="Center" TextWrapping="Wrap"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTemplateColumn Header="kg/m²" Width="40">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding KNM2}" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" FontFamily="Courier" FontStyle="Normal" FontWeight="Normal"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate >
                                                <DataTemplate>
                                                    <TextBox Text="{Binding KNM2, Mode=TwoWay}" Height="Auto" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" VerticalContentAlignment="Center" Foreground="#FFE2E2E2" Background="#4D4D4D"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </Grid>
                        </Expander>
                    </Grid>
                </TabItem>
                <TabItem  MaxWidth="55" HorizontalAlignment="Left" Background="#FF4D4D4D" Template="{StaticResource simpleTI}" BorderBrush="#FF4D4D4D" Margin="-2,0,0,0" >
                    <TabItem.Header>
                        <Image x:Name="ImagePath1" Source="/StructureAttributes.UI;component/Resources/new_LineLoad.png" Width="21" Height="21" Margin="5"/>
                    </TabItem.Header>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <GroupBox Style="{DynamicResource GroupBoxStyle1}" Header="Line Load Description" Grid.Row="0" MinHeight="60" FontFamily="Courier" BorderBrush="Gray" BorderThickness="1" Foreground="#FFE2E2E2" Margin="0,5,0,0" FontSize="12" >
                            <StackPanel>
                                <TextBlock x:Name="DescriptionLineLoad" FontSize="11" FontWeight="Regular" Foreground="#FFE2E2E2" FontFamily="Courier" TextWrapping="Wrap" Margin="3,5,0,0"/>
                                <Label x:Name="ValueLineLoad" FontSize="11" FontWeight="Regular" Foreground="#FFE2E2E2" FontFamily="Courier" Margin="0,4,0,0"/>
                            </StackPanel>
                        </GroupBox>
                        <Expander Style="{DynamicResource ExpanderStyle1}"  Name="ExpanderControlLineLoad" Header="Line Load"  Foreground="#FFE2E2E2" FontWeight="SemiBold" FontSize="12" HorizontalAlignment="Stretch" Width="Auto" Height="Auto" IsExpanded="False" BorderBrush="#616161" BorderThickness="2,2,2,2" FontFamily="Courier" Grid.Row="2" Margin="0,9,0,0" Background="#FF464646">
                            <Grid Width="Auto" Height="400" HorizontalAlignment="Stretch">
                                <DataGrid Name="DataGridLineLoad" 
                                          BorderBrush="#FF464646"
                                          BorderThickness="3,3,3,3"
                                          VerticalContentAlignment="Center"
                                          HorizontalAlignment="Stretch" 
                                          Foreground="#FFE2E2E2" 
                                          Background="#4D4D4D" 
                                          IsSynchronizedWithCurrentItem="True" 
                                          AutoGenerateColumns="False"
                                          HorizontalGridLinesBrush="#FF5A5A5A" 
                                          VerticalGridLinesBrush="#FF5A5A5A"
                                          HeadersVisibility="Column" 
                                          ScrollViewer.VerticalScrollBarVisibility="Auto"
                                          CanUserSortColumns="False"
                                          ScrollViewer.CanContentScroll="True"
                                          RowDetailsVisibilityMode="VisibleWhenSelected">
                                    <DataGrid.Columns >
                                        <DataGridTemplateColumn Header="Meters" Width="40" CanUserSort="False" CanUserResize="True" CanUserReorder="False" >
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Meters, ValidatesOnDataErrors=True, ValidatesOnNotifyDataErrors=True, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True, NotifyOnValidationError=True}" Height="22" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" FontFamily="Courier" FontStyle="Normal" FontWeight="Normal"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate>
                                                    <TextBox Text="{Binding Meters, Mode=TwoWay}" Height="22" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" Background="#4D4D4D"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTemplateColumn Header="Material" Width="*">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Material}" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Center" TextWrapping="Wrap" Foreground="#FFE2E2E2" Margin="8,0,0,0" FontFamily="Courier" FontStyle="Normal" FontWeight="Normal"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate>
                                                    <TextBox Text="{Binding Material, Mode=TwoWay}" Height="Auto" Width="250" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" Background="#FF404040" BorderBrush="#FF404040" VerticalContentAlignment="Center"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTemplateColumn Header="kg/m²" Width="40">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding kgM2}" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" FontFamily="Courier" FontStyle="Normal" FontWeight="Normal"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate >
                                                <DataTemplate>
                                                    <TextBox Text="{Binding kgM2, Mode=TwoWay}" Height="Auto" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" VerticalContentAlignment="Center" Foreground="#FFE2E2E2" Background="#4D4D4D"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </Grid>
                        </Expander>
                    </Grid>
                </TabItem>
                <TabItem x:Name="TabItem_Sections"  MaxWidth="55" HorizontalAlignment="Left" Background="#FF4D4D4D" Template="{StaticResource simpleTI}" BorderBrush="#FF4D4D4D" Margin="-2,0,0,0" >
                    <TabItem.Header>
                        <Image x:Name="ImagePath3" Source="/StructureAttributes.UI;component/Resources/crossSection.png" Width="17" Height="17" Margin="5"/>
                    </TabItem.Header>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Expander Style="{DynamicResource ExpanderStyle1}"  Name="ExpanderControlSection" Header="Sections"  Foreground="#FFE2E2E2" FontWeight="SemiBold" FontSize="12" HorizontalAlignment="Stretch" Width="Auto" Height="Auto" IsExpanded="False" BorderBrush="#616161" BorderThickness="2,2,2,2" FontFamily="Courier" Grid.Row="0" Margin="0,9,0,0" Background="#FF464646">
                            <Grid Width="Auto" Height="400" HorizontalAlignment="Stretch">
                                <DataGrid x:Name="DataGridSection" 
                                          BorderBrush="#FF464646"
                                          BorderThickness="3,3,3,3"
                                          VerticalContentAlignment="Center"
                                          HorizontalAlignment="Stretch" 
                                          Foreground="#FFE2E2E2" 
                                          Background="#4D4D4D" 
                                          IsSynchronizedWithCurrentItem="True" 
                                          AutoGenerateColumns="False"
                                          HorizontalGridLinesBrush="#FF5A5A5A" 
                                          VerticalGridLinesBrush="#FF5A5A5A"
                                          HeadersVisibility="Column" 
                                          ScrollViewer.VerticalScrollBarVisibility="Auto"
                                          CanUserSortColumns="False"
                                          ScrollViewer.CanContentScroll="True"
                                          RowDetailsVisibilityMode="VisibleWhenSelected">
                                    <DataGrid.Columns >
                                        <DataGridTemplateColumn Header="Section" Width="40" CanUserSort="False" CanUserResize="True" CanUserReorder="False" >
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Section, ValidatesOnDataErrors=True, ValidatesOnNotifyDataErrors=True, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True, NotifyOnValidationError=True}" Height="22" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" FontFamily="Courier" FontStyle="Normal" FontWeight="Normal"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate>
                                                    <TextBox Text="{Binding Section, Mode=TwoWay}" Height="22" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" Background="#4D4D4D"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTemplateColumn Header="Structural Elements" Width="*">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding StructuralElements}" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Center" TextWrapping="Wrap" Foreground="#FFE2E2E2" Margin="8,0,0,0" FontFamily="Courier" FontStyle="Normal" FontWeight="Normal"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate>
                                                    <TextBox Text="{Binding StructuralElements, Mode=TwoWay}" Height="Auto" Width="250" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" Background="#FF404040" BorderBrush="#FF404040" VerticalContentAlignment="Center"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                        <DataGridTemplateColumn Header="Material" Width="55">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Material}" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFE2E2E2" FontFamily="Courier" FontStyle="Normal" FontWeight="Normal"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                            <DataGridTemplateColumn.CellEditingTemplate >
                                                <DataTemplate>
                                                    <TextBox Text="{Binding Material, Mode=TwoWay}" Height="Auto" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" VerticalContentAlignment="Center" Foreground="#FFE2E2E2" Background="#4D4D4D"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </Grid>
                        </Expander>
                    </Grid>
                </TabItem>
                <TabItem  MaxWidth="55" HorizontalAlignment="Left" Background="#FF4D4D4D" Template="{StaticResource simpleTI}" BorderBrush="#FF4D4D4D" Margin="-2,0,0,0" >
                    <TabItem.Header>
                        <Image x:Name="support1" Source="/StructureAttributes.UI;component/Resources/Capa_Sup_Icon.png" Width="18" Height="18" Margin="5"/>
                    </TabItem.Header>
                </TabItem>
            </TabControl>
        </StackPanel>
    </Grid>
</UserControl>
